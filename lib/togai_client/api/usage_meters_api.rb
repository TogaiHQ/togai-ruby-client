=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module TogaiClient
  class UsageMetersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate usage meter
    # Activate usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [UsageMeter]
    def activate_usage_meter(event_schema_name, usage_meter_name, opts = {})
      data, _status_code, _headers = activate_usage_meter_with_http_info(event_schema_name, usage_meter_name, opts)
      data
    end

    # Activate usage meter
    # Activate usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageMeter, Integer, Hash)>] UsageMeter data, response status code and response headers
    def activate_usage_meter_with_http_info(event_schema_name, usage_meter_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.activate_usage_meter ...'
      end
      # verify the required parameter 'event_schema_name' is set
      if @api_client.config.client_side_validation && event_schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'event_schema_name' when calling UsageMetersApi.activate_usage_meter"
      end
      if @api_client.config.client_side_validation && event_schema_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_schema_name" when calling UsageMetersApi.activate_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'usage_meter_name' is set
      if @api_client.config.client_side_validation && usage_meter_name.nil?
        fail ArgumentError, "Missing the required parameter 'usage_meter_name' when calling UsageMetersApi.activate_usage_meter"
      end
      if @api_client.config.client_side_validation && usage_meter_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "usage_meter_name" when calling UsageMetersApi.activate_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}/activate'.sub('{' + 'event_schema_name' + '}', CGI.escape(event_schema_name.to_s)).sub('{' + 'usage_meter_name' + '}', CGI.escape(usage_meter_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMeter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.activate_usage_meter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#activate_usage_meter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an usage meter
    # Create an usage meter
    # @param event_schema_name [String] 
    # @param create_usage_meter_request [CreateUsageMeterRequest] Payload to create usage meter
    # @param [Hash] opts the optional parameters
    # @return [UsageMeter]
    def create_usage_meter(event_schema_name, create_usage_meter_request, opts = {})
      data, _status_code, _headers = create_usage_meter_with_http_info(event_schema_name, create_usage_meter_request, opts)
      data
    end

    # Create an usage meter
    # Create an usage meter
    # @param event_schema_name [String] 
    # @param create_usage_meter_request [CreateUsageMeterRequest] Payload to create usage meter
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageMeter, Integer, Hash)>] UsageMeter data, response status code and response headers
    def create_usage_meter_with_http_info(event_schema_name, create_usage_meter_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.create_usage_meter ...'
      end
      # verify the required parameter 'event_schema_name' is set
      if @api_client.config.client_side_validation && event_schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'event_schema_name' when calling UsageMetersApi.create_usage_meter"
      end
      if @api_client.config.client_side_validation && event_schema_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_schema_name" when calling UsageMetersApi.create_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'create_usage_meter_request' is set
      if @api_client.config.client_side_validation && create_usage_meter_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_usage_meter_request' when calling UsageMetersApi.create_usage_meter"
      end
      # resource path
      local_var_path = '/event_schema/{event_schema_name}/usage_meters'.sub('{' + 'event_schema_name' + '}', CGI.escape(event_schema_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_usage_meter_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMeter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.create_usage_meter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#create_usage_meter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate usage meter
    # Deactivate usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [UsageMeter]
    def deactivate_usage_meter(event_schema_name, usage_meter_name, opts = {})
      data, _status_code, _headers = deactivate_usage_meter_with_http_info(event_schema_name, usage_meter_name, opts)
      data
    end

    # Deactivate usage meter
    # Deactivate usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageMeter, Integer, Hash)>] UsageMeter data, response status code and response headers
    def deactivate_usage_meter_with_http_info(event_schema_name, usage_meter_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.deactivate_usage_meter ...'
      end
      # verify the required parameter 'event_schema_name' is set
      if @api_client.config.client_side_validation && event_schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'event_schema_name' when calling UsageMetersApi.deactivate_usage_meter"
      end
      if @api_client.config.client_side_validation && event_schema_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_schema_name" when calling UsageMetersApi.deactivate_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'usage_meter_name' is set
      if @api_client.config.client_side_validation && usage_meter_name.nil?
        fail ArgumentError, "Missing the required parameter 'usage_meter_name' when calling UsageMetersApi.deactivate_usage_meter"
      end
      if @api_client.config.client_side_validation && usage_meter_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "usage_meter_name" when calling UsageMetersApi.deactivate_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}/deactivate'.sub('{' + 'event_schema_name' + '}', CGI.escape(event_schema_name.to_s)).sub('{' + 'usage_meter_name' + '}', CGI.escape(usage_meter_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMeter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.deactivate_usage_meter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#deactivate_usage_meter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Usage Meter
    # Delete an Usage Meter
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_usage_meter(usage_meter_name, opts = {})
      data, _status_code, _headers = delete_usage_meter_with_http_info(usage_meter_name, opts)
      data
    end

    # Delete an Usage Meter
    # Delete an Usage Meter
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_usage_meter_with_http_info(usage_meter_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.delete_usage_meter ...'
      end
      # verify the required parameter 'usage_meter_name' is set
      if @api_client.config.client_side_validation && usage_meter_name.nil?
        fail ArgumentError, "Missing the required parameter 'usage_meter_name' when calling UsageMetersApi.delete_usage_meter"
      end
      if @api_client.config.client_side_validation && usage_meter_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "usage_meter_name" when calling UsageMetersApi.delete_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/usage_meter/{usage_meter_name}'.sub('{' + 'usage_meter_name' + '}', CGI.escape(usage_meter_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.delete_usage_meter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#delete_usage_meter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get usage meter
    # Get usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [UsageMeter]
    def get_usage_meter(event_schema_name, usage_meter_name, opts = {})
      data, _status_code, _headers = get_usage_meter_with_http_info(event_schema_name, usage_meter_name, opts)
      data
    end

    # Get usage meter
    # Get usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageMeter, Integer, Hash)>] UsageMeter data, response status code and response headers
    def get_usage_meter_with_http_info(event_schema_name, usage_meter_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.get_usage_meter ...'
      end
      # verify the required parameter 'event_schema_name' is set
      if @api_client.config.client_side_validation && event_schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'event_schema_name' when calling UsageMetersApi.get_usage_meter"
      end
      if @api_client.config.client_side_validation && event_schema_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_schema_name" when calling UsageMetersApi.get_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'usage_meter_name' is set
      if @api_client.config.client_side_validation && usage_meter_name.nil?
        fail ArgumentError, "Missing the required parameter 'usage_meter_name' when calling UsageMetersApi.get_usage_meter"
      end
      if @api_client.config.client_side_validation && usage_meter_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "usage_meter_name" when calling UsageMetersApi.get_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}'.sub('{' + 'event_schema_name' + '}', CGI.escape(event_schema_name.to_s)).sub('{' + 'usage_meter_name' + '}', CGI.escape(usage_meter_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMeter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.get_usage_meter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#get_usage_meter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List usage meters for event schema
    # List usage meters for event schema with pagination and sort
    # @param event_schema_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :statuses Filter by provided statuses
    # @option opts [String] :aggregations Filter by provided aggregations
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @option opts [String] :sort_order 
    # @return [UsageMeterPaginatedResponse]
    def get_usage_meters_for_event_schema(event_schema_name, opts = {})
      data, _status_code, _headers = get_usage_meters_for_event_schema_with_http_info(event_schema_name, opts)
      data
    end

    # List usage meters for event schema
    # List usage meters for event schema with pagination and sort
    # @param event_schema_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :statuses Filter by provided statuses
    # @option opts [String] :aggregations Filter by provided aggregations
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @option opts [String] :sort_order 
    # @return [Array<(UsageMeterPaginatedResponse, Integer, Hash)>] UsageMeterPaginatedResponse data, response status code and response headers
    def get_usage_meters_for_event_schema_with_http_info(event_schema_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.get_usage_meters_for_event_schema ...'
      end
      # verify the required parameter 'event_schema_name' is set
      if @api_client.config.client_side_validation && event_schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'event_schema_name' when calling UsageMetersApi.get_usage_meters_for_event_schema"
      end
      if @api_client.config.client_side_validation && event_schema_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_schema_name" when calling UsageMetersApi.get_usage_meters_for_event_schema, the character length must be smaller than or equal to 50.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/event_schema/{event_schema_name}/usage_meters'.sub('{' + 'event_schema_name' + '}', CGI.escape(event_schema_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'aggregations'] = opts[:'aggregations'] if !opts[:'aggregations'].nil?
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMeterPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.get_usage_meters_for_event_schema",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#get_usage_meters_for_event_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an usage meter
    # Update an usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param update_usage_meter_request [UpdateUsageMeterRequest] Payload to create usage meter
    # @param [Hash] opts the optional parameters
    # @return [UsageMeter]
    def update_usage_meter(event_schema_name, usage_meter_name, update_usage_meter_request, opts = {})
      data, _status_code, _headers = update_usage_meter_with_http_info(event_schema_name, usage_meter_name, update_usage_meter_request, opts)
      data
    end

    # Update an usage meter
    # Update an usage meter
    # @param event_schema_name [String] 
    # @param usage_meter_name [String] 
    # @param update_usage_meter_request [UpdateUsageMeterRequest] Payload to create usage meter
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageMeter, Integer, Hash)>] UsageMeter data, response status code and response headers
    def update_usage_meter_with_http_info(event_schema_name, usage_meter_name, update_usage_meter_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageMetersApi.update_usage_meter ...'
      end
      # verify the required parameter 'event_schema_name' is set
      if @api_client.config.client_side_validation && event_schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'event_schema_name' when calling UsageMetersApi.update_usage_meter"
      end
      if @api_client.config.client_side_validation && event_schema_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_schema_name" when calling UsageMetersApi.update_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'usage_meter_name' is set
      if @api_client.config.client_side_validation && usage_meter_name.nil?
        fail ArgumentError, "Missing the required parameter 'usage_meter_name' when calling UsageMetersApi.update_usage_meter"
      end
      if @api_client.config.client_side_validation && usage_meter_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "usage_meter_name" when calling UsageMetersApi.update_usage_meter, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_usage_meter_request' is set
      if @api_client.config.client_side_validation && update_usage_meter_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_usage_meter_request' when calling UsageMetersApi.update_usage_meter"
      end
      # resource path
      local_var_path = '/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}'.sub('{' + 'event_schema_name' + '}', CGI.escape(event_schema_name.to_s)).sub('{' + 'usage_meter_name' + '}', CGI.escape(usage_meter_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_usage_meter_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UsageMeter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UsageMetersApi.update_usage_meter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageMetersApi#update_usage_meter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
