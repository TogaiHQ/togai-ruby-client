=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module TogaiClient
  class EventIngestionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Ingest events to Togai
    # API to ingest your application event to Togai for billing and usage analytics. To know the limits on the ingestion api, check our docs - https://togai.com/docs/limits.
    # @param ingest_event_request [IngestEventRequest] Request body to ingest events to Togai usage and billing management service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ingest(ingest_event_request, opts = {})
      ingest_with_http_info(ingest_event_request, opts)
      nil
    end

    # Ingest events to Togai
    # API to ingest your application event to Togai for billing and usage analytics. To know the limits on the ingestion api, check our docs - https://togai.com/docs/limits.
    # @param ingest_event_request [IngestEventRequest] Request body to ingest events to Togai usage and billing management service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ingest_with_http_info(ingest_event_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventIngestionApi.ingest ...'
      end
      # verify the required parameter 'ingest_event_request' is set
      if @api_client.config.client_side_validation && ingest_event_request.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_event_request' when calling EventIngestionApi.ingest"
      end
      # resource path
      local_var_path = '/ingest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ingest_event_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventIngestionApi.ingest",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventIngestionApi#ingest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ingest events to Togai in batch
    # API to ingest your application event in batch to Togai for billing and usage analytics. To know the limits on the ingestion api, check our docs - https://togai.com/docs/limits.
    # @param ingest_batch_event_request [IngestBatchEventRequest] Request body to ingest events in batch to Togai usage and billing management service.
    # @param [Hash] opts the optional parameters
    # @return [IngestBatchEventResponse]
    def ingest_batch(ingest_batch_event_request, opts = {})
      data, _status_code, _headers = ingest_batch_with_http_info(ingest_batch_event_request, opts)
      data
    end

    # Ingest events to Togai in batch
    # API to ingest your application event in batch to Togai for billing and usage analytics. To know the limits on the ingestion api, check our docs - https://togai.com/docs/limits.
    # @param ingest_batch_event_request [IngestBatchEventRequest] Request body to ingest events in batch to Togai usage and billing management service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IngestBatchEventResponse, Integer, Hash)>] IngestBatchEventResponse data, response status code and response headers
    def ingest_batch_with_http_info(ingest_batch_event_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventIngestionApi.ingest_batch ...'
      end
      # verify the required parameter 'ingest_batch_event_request' is set
      if @api_client.config.client_side_validation && ingest_batch_event_request.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_batch_event_request' when calling EventIngestionApi.ingest_batch"
      end
      # resource path
      local_var_path = '/ingestBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ingest_batch_event_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IngestBatchEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventIngestionApi.ingest_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventIngestionApi#ingest_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
