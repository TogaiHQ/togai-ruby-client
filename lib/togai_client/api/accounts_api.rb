=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module TogaiClient
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Aliases to account
    # Add Aliases to an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param add_account_aliases_request [AddAccountAliasesRequest] Payload to add aliases to account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def add_aliases(customer_id, account_id, add_account_aliases_request, opts = {})
      data, _status_code, _headers = add_aliases_with_http_info(customer_id, account_id, add_account_aliases_request, opts)
      data
    end

    # Add Aliases to account
    # Add Aliases to an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param add_account_aliases_request [AddAccountAliasesRequest] Payload to add aliases to account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def add_aliases_with_http_info(customer_id, account_id, add_account_aliases_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.add_aliases ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.add_aliases"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.add_aliases, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.add_aliases"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.add_aliases, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'add_account_aliases_request' is set
      if @api_client.config.client_side_validation && add_account_aliases_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_account_aliases_request' when calling AccountsApi.add_aliases"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/accounts/{account_id}/add_aliases'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_account_aliases_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.add_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#add_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate a plan to an account
    # Associate a plan to an account
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param associate_price_plan_request [AssociatePricePlanRequest] Payload to associate a price plan to an account
    # @param [Hash] opts the optional parameters
    # @return [AssociatePricePlanResponse]
    def associate_price_plan(customer_id, account_id, associate_price_plan_request, opts = {})
      data, _status_code, _headers = associate_price_plan_with_http_info(customer_id, account_id, associate_price_plan_request, opts)
      data
    end

    # Associate a plan to an account
    # Associate a plan to an account
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param associate_price_plan_request [AssociatePricePlanRequest] Payload to associate a price plan to an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociatePricePlanResponse, Integer, Hash)>] AssociatePricePlanResponse data, response status code and response headers
    def associate_price_plan_with_http_info(customer_id, account_id, associate_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.associate_price_plan ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.associate_price_plan"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.associate_price_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.associate_price_plan"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.associate_price_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'associate_price_plan_request' is set
      if @api_client.config.client_side_validation && associate_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'associate_price_plan_request' when calling AccountsApi.associate_price_plan"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/accounts/{account_id}/price_plans'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(associate_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AssociatePricePlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.associate_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#associate_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an account
    # Create an account
    # @param customer_id [String] 
    # @param create_account_request [CreateAccountRequest] Payload to create account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def create_account(customer_id, create_account_request, opts = {})
      data, _status_code, _headers = create_account_with_http_info(customer_id, create_account_request, opts)
      data
    end

    # Create an account
    # Create an account
    # @param customer_id [String] 
    # @param create_account_request [CreateAccountRequest] Payload to create account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def create_account_with_http_info(customer_id, create_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_account ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.create_account"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.create_account, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'create_account_request' is set
      if @api_client.config.client_side_validation && create_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_account_request' when calling AccountsApi.create_account"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/accounts'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an account
    # Delete an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_account(customer_id, account_id, opts = {})
      data, _status_code, _headers = delete_account_with_http_info(customer_id, account_id, opts)
      data
    end

    # Delete an account
    # Delete an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_account_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_account ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.delete_account"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.delete_account, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.delete_account, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/customers/{customer_id}/accounts/{account_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an account
    # Get an account
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def get_account(customer_id, account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(customer_id, account_id, opts)
      data
    end

    # Get an account
    # Get an account
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_account_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.get_account"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.get_account, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.get_account, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/customers/{customer_id}/accounts/{account_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accounts of customer
    # List accounts with pagination and sort
    # @param customer_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @return [AccountPaginatedResponse]
    def get_accounts(customer_id, opts = {})
      data, _status_code, _headers = get_accounts_with_http_info(customer_id, opts)
      data
    end

    # List accounts of customer
    # List accounts with pagination and sort
    # @param customer_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @return [Array<(AccountPaginatedResponse, Integer, Hash)>] AccountPaginatedResponse data, response status code and response headers
    def get_accounts_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_accounts ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.get_accounts"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.get_accounts, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/customers/{customer_id}/accounts'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Aliases to account
    # Remove Aliases to an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param remove_account_aliases_request [RemoveAccountAliasesRequest] Payload to remove aliases from account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def remove_aliases(customer_id, account_id, remove_account_aliases_request, opts = {})
      data, _status_code, _headers = remove_aliases_with_http_info(customer_id, account_id, remove_account_aliases_request, opts)
      data
    end

    # Remove Aliases to account
    # Remove Aliases to an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param remove_account_aliases_request [RemoveAccountAliasesRequest] Payload to remove aliases from account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def remove_aliases_with_http_info(customer_id, account_id, remove_account_aliases_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.remove_aliases ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.remove_aliases"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.remove_aliases, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.remove_aliases"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.remove_aliases, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'remove_account_aliases_request' is set
      if @api_client.config.client_side_validation && remove_account_aliases_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_account_aliases_request' when calling AccountsApi.remove_aliases"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/accounts/{account_id}/remove_aliases'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remove_account_aliases_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.remove_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#remove_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an account
    # Update an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param update_account_request [UpdateAccountRequest] Payload to update account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def update_account(customer_id, account_id, update_account_request, opts = {})
      data, _status_code, _headers = update_account_with_http_info(customer_id, account_id, update_account_request, opts)
      data
    end

    # Update an account
    # Update an account by id
    # @param customer_id [String] 
    # @param account_id [String] 
    # @param update_account_request [UpdateAccountRequest] Payload to update account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def update_account_with_http_info(customer_id, account_id, update_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.update_account"
      end
      if @api_client.config.client_side_validation && customer_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "customer_id" when calling AccountsApi.update_account, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account"
      end
      if @api_client.config.client_side_validation && account_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_id" when calling AccountsApi.update_account, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_account_request' is set
      if @api_client.config.client_side_validation && update_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_account_request' when calling AccountsApi.update_account"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/accounts/{account_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
