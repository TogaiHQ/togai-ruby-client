=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module TogaiClient
  class EventManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get usage events from Togai
    # API to get usage events ingested to Togai.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Pagination token used as a marker to get records from next page.
    # @option opts [String] :status Filter option to filter the events by processed/unprocessed status.
    # @option opts [String] :account_id Filter option to filter the events based on account id.
    # @option opts [Integer] :page_size Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided.
    # @option opts [Integer] :start_time Start time filter in epoch milli seconds
    # @option opts [Integer] :end_time End time filter in epoch milli seconds
    # @return [GetEventsResponse]
    def get_events(opts = {})
      data, _status_code, _headers = get_events_with_http_info(opts)
      data
    end

    # Get usage events from Togai
    # API to get usage events ingested to Togai.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Pagination token used as a marker to get records from next page.
    # @option opts [String] :status Filter option to filter the events by processed/unprocessed status.
    # @option opts [String] :account_id Filter option to filter the events based on account id.
    # @option opts [Integer] :page_size Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided.
    # @option opts [Integer] :start_time Start time filter in epoch milli seconds
    # @option opts [Integer] :end_time End time filter in epoch milli seconds
    # @return [Array<(GetEventsResponse, Integer, Hash)>] GetEventsResponse data, response status code and response headers
    def get_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventManagementApi.get_events ...'
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventManagementApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventManagementApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the usage event given event id.
    # API to get the event given the event id.
    # @param event_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetEventResponse]
    def get_single_event(event_id, opts = {})
      data, _status_code, _headers = get_single_event_with_http_info(event_id, opts)
      data
    end

    # Get the usage event given event id.
    # API to get the event given the event id.
    # @param event_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEventResponse, Integer, Hash)>] GetEventResponse data, response status code and response headers
    def get_single_event_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventManagementApi.get_single_event ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling EventManagementApi.get_single_event"
      end
      if @api_client.config.client_side_validation && event_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "event_id" when calling EventManagementApi.get_single_event, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/events/{event_id}'.sub('{' + 'event_id' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventManagementApi.get_single_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventManagementApi#get_single_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
