=begin
#Togai Apis

#APIs for Togai App

The version of the OpenAPI document: 1.0
Contact: engg@togai.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module TogaiClient
  class PricePlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate a price plan
    # Activate a price plan
    # @param price_plan_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PricePlan]
    def activate_price_plan(price_plan_name, opts = {})
      data, _status_code, _headers = activate_price_plan_with_http_info(price_plan_name, opts)
      data
    end

    # Activate a price plan
    # Activate a price plan
    # @param price_plan_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def activate_price_plan_with_http_info(price_plan_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.activate_price_plan ...'
      end
      # verify the required parameter 'price_plan_name' is set
      if @api_client.config.client_side_validation && price_plan_name.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_name' when calling PricePlansApi.activate_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_name" when calling PricePlansApi.activate_price_plan, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/price_plans/{price_plan_name}/activate'.sub('{' + 'price_plan_name' + '}', CGI.escape(price_plan_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.activate_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#activate_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a price plan
    # Create a price plan
    # @param create_price_plan_request [CreatePricePlanRequest] Payload to create price plan
    # @param [Hash] opts the optional parameters
    # @return [PricePlan]
    def create_price_plan(create_price_plan_request, opts = {})
      data, _status_code, _headers = create_price_plan_with_http_info(create_price_plan_request, opts)
      data
    end

    # Create a price plan
    # Create a price plan
    # @param create_price_plan_request [CreatePricePlanRequest] Payload to create price plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def create_price_plan_with_http_info(create_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.create_price_plan ...'
      end
      # verify the required parameter 'create_price_plan_request' is set
      if @api_client.config.client_side_validation && create_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_price_plan_request' when calling PricePlansApi.create_price_plan"
      end
      # resource path
      local_var_path = '/price_plans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.create_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#create_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a price plan
    # Get a price plan
    # @param price_plan_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PricePlan]
    def get_price_plan(price_plan_name, opts = {})
      data, _status_code, _headers = get_price_plan_with_http_info(price_plan_name, opts)
      data
    end

    # Get a price plan
    # Get a price plan
    # @param price_plan_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def get_price_plan_with_http_info(price_plan_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.get_price_plan ...'
      end
      # verify the required parameter 'price_plan_name' is set
      if @api_client.config.client_side_validation && price_plan_name.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_name' when calling PricePlansApi.get_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_name" when calling PricePlansApi.get_price_plan, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/price_plans/{price_plan_name}'.sub('{' + 'price_plan_name' + '}', CGI.escape(price_plan_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.get_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#get_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List price plans
    # List price plans with pagination and sort
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @return [PricePlanPaginatedResponse]
    def get_price_plans(opts = {})
      data, _status_code, _headers = get_price_plans_with_http_info(opts)
      data
    end

    # List price plans
    # List price plans with pagination and sort
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @return [Array<(PricePlanPaginatedResponse, Integer, Hash)>] PricePlanPaginatedResponse data, response status code and response headers
    def get_price_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.get_price_plans ...'
      end
      # resource path
      local_var_path = '/price_plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlanPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.get_price_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#get_price_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a price plan
    # Update a price plan
    # @param price_plan_name [String] 
    # @param update_price_plan_request [UpdatePricePlanRequest] Payload to update price plan
    # @param [Hash] opts the optional parameters
    # @return [PricePlan]
    def update_price_plan(price_plan_name, update_price_plan_request, opts = {})
      data, _status_code, _headers = update_price_plan_with_http_info(price_plan_name, update_price_plan_request, opts)
      data
    end

    # Update a price plan
    # Update a price plan
    # @param price_plan_name [String] 
    # @param update_price_plan_request [UpdatePricePlanRequest] Payload to update price plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(PricePlan, Integer, Hash)>] PricePlan data, response status code and response headers
    def update_price_plan_with_http_info(price_plan_name, update_price_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricePlansApi.update_price_plan ...'
      end
      # verify the required parameter 'price_plan_name' is set
      if @api_client.config.client_side_validation && price_plan_name.nil?
        fail ArgumentError, "Missing the required parameter 'price_plan_name' when calling PricePlansApi.update_price_plan"
      end
      if @api_client.config.client_side_validation && price_plan_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "price_plan_name" when calling PricePlansApi.update_price_plan, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_price_plan_request' is set
      if @api_client.config.client_side_validation && update_price_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_price_plan_request' when calling PricePlansApi.update_price_plan"
      end
      # resource path
      local_var_path = '/price_plans/{price_plan_name}'.sub('{' + 'price_plan_name' + '}', CGI.escape(price_plan_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_price_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PricePlan'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PricePlansApi.update_price_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricePlansApi#update_price_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
